//
//  PurchaseProduct.swift
//  InAppPurchaseSample
//
//  Created by uematsushun on 2020/09/26.
//

import Combine
import Foundation
import StoreKit

protocol PurchasedResultNotification: AnyObject {
	/// Notify that the transaction is complete.
	/// - Parameter transaction: Finished transaction.
	func completed(transaction: SKPaymentTransaction)
	
	/// Notify that the transaction has failed.///
	/// - Parameter transaction: Failed transaction.
	func failed(transaction: SKPaymentTransaction)
}

final class PurchaseProduct: NSObject {
	
	private override init() { }
	static let shared = PurchaseProduct()
	
	weak var delegate: PurchasedResultNotification?
	
	// Flag indicating whether user is subscribed for month.
	private let _subscribed = PassthroughSubject<Bool, Never>()
	var subscribed: AnyPublisher<Bool, Never> {
		_subscribed.eraseToAnyPublisher()
	}
	
	func callAsFunction(product: SKProduct) {
		let payment = SKPayment(product: product)
		// Transaction is generated by enqueue to a payment queue
		SKPaymentQueue.default().add(payment)
	}
}

extension PurchaseProduct: SKPaymentTransactionObserver {
    // トランザクション(購入処理)の状態が通知される.
    func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {
        transactions.forEach { transaction in
            switch transaction.transactionState {
            case .purchased, .restored:
                print("complete")
                // TODO: ここでレシートデータの取得&レシート検証を行う.これについては後述.
                UserDefaults.standard.set(true, forKey:"isPurchased")

                SKPaymentQueue.default().finishTransaction(transaction)
                
            case .failed:
                print("failed")
                SKPaymentQueue.default().finishTransaction(transaction)
            case .purchasing, .deferred:
                print("nothing")
            @unknown default:
                break
            }
        }
    }
}
